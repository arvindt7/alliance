[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = True

# Show debugging output in logs (sets DEBUG log level output)
debug = True

# Address to bind the REST API server
bind_host = 0.0.0.0

# Port to bind the API server to
bind_port = 9442

# Host name, for use in HATEOS-style references
#  Note: Typically this would be the load balanced endpoint that clients would use
#  communicate back with this service.
host_href = http://localhost:9711

# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
#log_file = /var/log/alliance/api.log

# Backlog requests when creating socket
backlog = 4096

# TCP_KEEPIDLE value in seconds when creating socket.
# Not supported on OS X.
#tcp_keepidle = 600

# Maximum allowed http request size against the barbican-api
max_allowed_secret_in_bytes = 10000
max_allowed_request_size_in_bytes = 1000000

# SQLAlchemy connection string for the reference implementation
# registry server. Any valid SQLAlchemy connection string is fine.
# See: http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html#sqlalchemy.create_engine
# Uncomment this for local dev, putting db in project directory:
#sql_connection = sqlite:///alliance.sqlite
# Note: For absolute addresses, use '////' slashes after 'sqlite:'
# Uncomment for a more global development environment
sql_connection = sqlite:////var/lib/alliance/alliance.sqlite

# Period in seconds after which SQLAlchemy should reestablish its connection
# to the database.
#
# MySQL uses a default `wait_timeout` of 8 hours, after which it will drop
# idle connections. This can result in 'MySQL Gone Away' exceptions. If you
# notice this, you can lower this value to ensure that SQLAlchemy reconnects
# before MySQL can drop the connection.
sql_idle_timeout = 3600

# Default page size for the 'limit' paging URL parameter.
default_limit_paging = 10

# Maximum page size for the 'limit' paging URL parameter.
max_limit_paging = 100

# Number of Barbican API worker processes to start.
# On machines with more than one CPU increasing this value
# may improve performance (especially if using SSL with
# compression turned on). It is typically recommended to set
# this value to the number of CPUs present on your machine.
workers = 1

# Role used to identify an authenticated user as administrator
#admin_role = admin

# Allow unauthenticated users to access the API with read-only
# privileges. This only applies when using ContextMiddleware.
#allow_anonymous_access = False

# Allow access to version 1 of barbican api
#enable_v1_api = True

# Allow access to version 2 of barbican api
#enable_v2_api = True

# ================= thrift server ===================
[tserver]
# Host for thrift server request listener
thriftServerHost = localhost

# Port used for thrift NON-SSL request listener
thriftTcpPort = 9441

thriftSslProtocol = TLS

# Port used for thrift SSL request listener
thriftSslPort = 9443

# Flag to indicate SSL listener is enabled or not
thriftSslListenerEnabled = true

# (Not implemented) Retry maximum time window (in miiliseconds) from first retry attempt after which retry is not further attempted.
thriftRetryMaxIntervalMillis = 500

# Flag to indicate wheter client auth (2-way SSL) is required or not in case of SSL
thriftSslClientAuthRequired = false

# Queue capacity in case of bounded queues (ARRAY_BLOCKING_QUEUE, LINKED_BLOCKING_QUEUE). Any value less than 1 indicates infinite size
thriftSslQueueCapacity = 800

# Minimum number of threads (core threads) created in thread pool for serving thrift requests
thriftThreadPoolMinSize = 200 

# String to indicate type of queue for queuing request in thread pool server. Either of value is expected LINKED_BLOCKING_QUEUE, ARRAY_BLOCKING_QUEUE, SYNCHRONOUS_QUEUE
thriftSslQueueType = LINKED_BLOCKING_QUEUE

# Maximum number of retry attempted in case of concurrent reject case happens.
thriftRetryMaxAttempt = 3
  
thriftSslCipherSuites = TLS_DHE_RSA_WITH_AES_128_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA,TLS_DHE_DSS_WITH_AES_128_CBC_SHA,SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA

# Flag to indicate whether to allow core threads timeout (same as keep alive time). Valid value is true or false
thriftThreadAllowCoreTimeout = false
 
# Client timeout in milliseconds before socket timeout is raised. zero means infinite timout
thriftClientTimeout = 0


# Keep alive time in milliseconds. Idle time for non-core threads before they get terminated.
thriftThreadKeepAliveTime = 20000

# Maximum number of threads created in thread pool for serving thrift requests
thriftThreadPoolMaxSize = 400

# Flag to indicate NON-SSL listener is enabled or not
thriftTcpListenerEnabled = true

# ================= thrift client ===================
#[tclient]


# ================= Crypto plugin ===================
[crypto]
namespace = barbican.crypto.plugin
enabled_crypto_plugins = simple_crypto
#enabled_crypto_plugins = dogtag_crypto

[simple_crypto_plugin]
# the kek should be a 32-byte value which is base64 encoded
kek = 'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY='

# ================= keystone ===================
[keystone]
signing_dir = /tmp/barbican/cache
auth_host = localhost
auth_port = 35357
pulic_port = 5000
auth_protocol = http 
admin_tenant_name = service 
admin_user = lbadmin 
admin_password = changeit 
auth_version = v3.0 
#delay failing perhaps to log the unauthorized request in barbican ..
#delay_auth_decision = true
log_name = alliance-proxy
include_service_catalog = False

